"""
Django settings for demo project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'v$721$^edzrmh_coi+p4fu5hk$8i#z=tf3ueuxide^^vtht6z#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # sparrow cloud
    # "sparrow_cloud.apps.ping",
    # "sparrow_cloud.apps.permission_command",
    # "testpermission_path",
    # "sparrow_cloud.apps.message_service",
    "message_service",
]

MIDDLEWARE = [
    # JWTMiddleware
    # 'sparrow_cloud.middleware.jwt_middleware.JWTMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'demo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'demo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    # SparrowAuthentication
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'sparrow_cloud.auth.user_id_authentication.UserIDAuthentication',
    ),
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',)
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}


# consul_service 依赖配置
CONSUL_CLIENT_ADDR = {
    "HOST": "127.0.0.1",  # consul host
    "PORT": 8500  # consul port
}

# UserIDAuthentication 依赖配置
SPARROW_AUTHENTICATION = {
    "USER_CLASS_PATH": "sparrow_cloud.auth.user.User",
}

# JWTMiddleware 依赖配置
JWT_MIDDLEWARE = {
    "JWT_SECRET": os.environ.get("JWT_SECRET", "w(9c%u@z$^*wiue7^wh)+&c2q$3(egzcvson@-x5i09^$vf+syh"),
}

# cache_manager 依赖配置
# import redis
# CACHE_REDIS_POOL = redis.ConnectionPool(
#     host='REDIS_HOST',  # redis host
#     port='REDIS_PORT',  # redis port
#     password='REDIS_PASSWORD',  # redis password
#     decode_responses=True)


SERVICE_NAME = "demo"

SPARROW_RABBITMQ_CONSUMER_CONF = {

    "MESSAGE_BROKER_CONF": {
        "USER_NAME": "xx",
        "PASSWORD": "xxxx",
        "VIRTUAL_HOST": "xxx",
        "BROKER_SERVICE_CONF": "sparrow-demo:8000",
    },
    "MESSAGE_BACKEND_CONF": {
        "BACKEND_SERVICE_CONF": "sparrow-demo:8000",
        "API_PATH": "/api/sparrow_task/test/update/"
    }
}


QUEUE_CONF_1 = {
            "QUEUE": "ORDER_PAY_SUC_ALL",
            "TARGET_FUNC_MAP": {
                "ORDER_PAY_SUC_ONLINE": "message_service.task.task1",
                "order_pay_success": "message_service.task.task1"
            }
        }


MESSAGE_SENDER_CONF = {
            "SERVICE_CONF": "xxxxx-svc:8000",
            "API_PATH": "/api/sparrow_task/producer/send/",
        }


# SPARROW_BROKER_SERVICE_HOST=127.0.0.1:5672 SPARROW_MESSAGE_BACKEND_HOST=backend5.dongyouliang.com python3 manage.py rabbitmq_consumer